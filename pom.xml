<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.apache.mesos</groupId>
  <artifactId>storm-parent</artifactId>
  <version>0.2.5-SNAPSHOT</version>
  <name>storm-parent</name>
  <packaging>pom</packaging>
  <description>Storm integration with the Mesos cluster manager</description>
  <scm>
    <connection>scm:git:git://github.com/mesos/storm.git</connection>
    <developerConnection>scm:git:ssh://git@github.com/mesos/storm.git</developerConnection>
    <url>https://github.com/mesos/storm</url>
    <tag>HEAD</tag>
  </scm>

  <modules>
    <module>storm-shim</module>
    <module>storm-shim-1x</module>
    <module>storm</module>
  </modules>

  <properties>
    <encoding>UTF-8</encoding>
    <!-- language versions -->
    <java.abi>1.7</java.abi>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
    <!-- These are used by bin/build-release.sh to determine which versions
         should be used by default if MESOS_RELEASE and/or STORM_RELEASE
         are not set. -->
    <storm.default.version>1.0.3</storm.default.version>
    <mesos.default.version>0.27.0</mesos.default.version>
    <mesos.version>0.27.0</mesos.version>
  </properties>

  <profiles>
    <profile>
      <id>storm1.0</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <storm.version>1.0.3</storm.version>
        <shim>storm-shim-1x</shim>
        <snakeyaml.scope>compile</snakeyaml.scope>
      </properties>
    </profile>
  </profiles>
  <repositories>
    <repository>
      <id>central</id>
      <url>http://repo1.maven.org/maven2</url>
    </repository>
    <repository>
      <id>clojars</id>
      <url>http://clojars.org/repo/</url>
    </repository>
    <repository>
      <id>mesosphere-public-repo</id>
      <url>http://s3.amazonaws.com/mesosphere-maven-public</url>
    </repository>
  </repositories>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>2.17</version>
        <executions>
          <execution>
            <id>validate</id>
            <phase>validate</phase>
            <configuration>
              <configLocation>config/checkstyle.xml</configLocation>
              <encoding>UTF-8</encoding>
              <consoleOutput>true</consoleOutput>
              <failsOnError>true</failsOnError>
            </configuration>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>2.5.3</version>
        <configuration>
          <autoVersionSubmodules>true</autoVersionSubmodules>
          <mavenExecutorId>forked-path</mavenExecutorId>
          <pushChanges>true</pushChanges>
          <localCheckout>true</localCheckout>
          <preparationGoals>clean install verify</preparationGoals>
          <useReleaseProfile>false</useReleaseProfile>
          <!-- use tags of the form "v0.1.3" instead of "storm-mesos-0.1.3" -->
          <tagNameFormat>v@{project.version}</tagNameFormat>
          <!-- XXX: Prevent `mvn release:perform` from doing anything, since we leverage
               the release plugin merely to rev versions and commit tags.
               i.e., when the release tag is pushed to the master branch of the mesos/storm
               repo in GitHub, a travis-ci build is kicked off which automatically uploads
               its artifacts to the GitHub project release page:
                  https://github.com/mesos/storm/releases
            -->
          <goals>help:help -q</goals>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.apache.mesos</groupId>
        <artifactId>mesos</artifactId>
        <version>${mesos.version}</version>
      </dependency>
      <dependency>
        <groupId>com.google.protobuf</groupId>
        <artifactId>protobuf-java</artifactId>
        <version>2.6.1</version>
      </dependency>
      <dependency>
        <groupId>org.apache.storm</groupId>
        <artifactId>storm-core</artifactId>
        <version>${storm.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.yaml</groupId>
        <artifactId>snakeyaml</artifactId>
        <version>1.11</version>
      </dependency>
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-exec</artifactId>
        <version>1.1</version>
      </dependency>
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>lang3</artifactId>
        <version>3.0.3</version>
      </dependency>
      <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
        <version>2.4</version>
      </dependency>
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>3.4</version>
      </dependency>
      <dependency>
        <groupId>com.googlecode.json-simple</groupId>
        <artifactId>json-simple</artifactId>
        <version>1.1</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>log4j-over-slf4j</artifactId>
        <version>1.6.6</version>
        <exclusions>
        <!-- slf4j-api is provided by storm-core. We might as well
               use the one that is provided to us by storm rather than including
               the slf4j-api classes in the jar.
               WARNING: Please do *not* shade org.slf4j. Classes from org.slf4j
                        are referenced within log4j-over-slf4j and shading them
                        would lead to java.lang.NoClassDefFoundError -->
          <exclusion>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>jetty</artifactId>
        <version>6.1.26</version>
      </dependency>
      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>18.0</version>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-all</artifactId>
        <version>1.9.5</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <reporting>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <version>3.0.3</version>
        <configuration>
          <effort>Max</effort>
          <threshold>Default</threshold>
          <xmlOutput>true</xmlOutput>
        </configuration>
      </plugin>
    </plugins>
  </reporting>
</project>
